// AUTOGENERATED FILE
// This file was generated from fift.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface FiftActionDict<T> extends BaseActionDict<T> {
  Program?: (this: NonterminalNode, arg0: TerminalNode, arg1: TerminalNode) => T;
  FunctionDeclaration?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
  FunctionImplementation?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: TerminalNode) => T;
  letterAsciiLC?: (this: NonterminalNode, arg0: TerminalNode) => T;
  letterAsciiUC?: (this: NonterminalNode, arg0: TerminalNode) => T;
  letterAscii?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  letterComment?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  idStart?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  idPart?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  id?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode) => T;
  space?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  comment?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  lineTerminator?: (this: NonterminalNode, arg0: TerminalNode) => T;
  multiLineComment?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: TerminalNode) => T;
  singleLineComment?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode) => T;
}

export interface FiftSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: FiftActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: FiftActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: FiftActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: FiftActionDict<T>): this;
}

export interface FiftGrammar extends Grammar {
  createSemantics(): FiftSemantics;
  extendSemantics(superSemantics: FiftSemantics): FiftSemantics;
}

declare const grammar: FiftGrammar;
export default grammar;

