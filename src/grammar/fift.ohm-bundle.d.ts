// AUTOGENERATED FILE
// This file was generated from fift.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface FiftActionDict<T> extends BaseActionDict<T> {
  Program?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: TerminalNode) => T;
  ProgramItem?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  FunctionDeclaration_simple?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
  FunctionDeclaration_exported?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  FunctionDeclaration?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  FunctionImplementation_generic?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: TerminalNode, arg3: IterationNode, arg4: TerminalNode) => T;
  FunctionImplementation_ref?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: TerminalNode, arg3: IterationNode, arg4: TerminalNode) => T;
  FunctionImplementation_inline?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: TerminalNode, arg3: IterationNode, arg4: TerminalNode) => T;
  FunctionImplementation?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Instruction_opcode?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Instruction?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_NOP?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_SWAP?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_DUP?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_OVER?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_DROP?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_NIP?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_ROT?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_MINUS_ROT?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_2SWAP?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_2DROP?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_2DUP?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_2OVER?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_PICK?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_ROLLX?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_MINUS_ROLLX?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_BLKSWX?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_REVX?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_DROPX?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_TUCK?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_XCHGX?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_DEPTH?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_CHKDEPTH?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_ONLYTOPX?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_ONLYX?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_ZERO?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_ONE?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_TWO?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_TEN?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_TRUE?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_PUSHINT?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Opcode_op_PUSHINTX?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Opcode_op_PUSHPOW2?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Opcode_op_PUSHNAN?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_PUSHPOW2DEC?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Opcode_op_PUSHNEGPOW2?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Opcode_op_PUSHREF?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Opcode_op_PUSHREFSLICE?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Opcode_op_PUSHREFCONT?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Opcode_op_PUSHSLICE?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Opcode_op_ADD?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_SUB?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_SUBR?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_NEGATE?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_INC?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_DEC?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_ADDCONST?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Opcode_op_SUBCONST?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Opcode_op_MULCONST?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Opcode_op_MUL?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_DIV?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_DIVR?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_DIVC?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_MOD?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_DIVMOD?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_DIVMODR?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_DIVMODC?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_RSHIFTR?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_RSHIFTC?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_RSHIFTR_HASH?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Opcode_op_RSHIFTC_HASH?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Opcode_op_MODPOW2_HASH?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Opcode_op_MODPOW2R_HASH?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Opcode_op_MODPOW2C_HASH?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Opcode_op_MULDIV?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_MULDIVR?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_MULMOD?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_MULDIVMOD?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_MULDIVMODR?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_MULDIVMODC?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_MULRSHIFT?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_MULRSHIFTR?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_MULRSHIFTC?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_MULRSHIFT_HASH?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Opcode_op_MULRSHIFTR_HASH?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Opcode_op_MULRSHIFTC_HASH?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Opcode_op_LSHIFTDIV?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_LSHIFTDIVR?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_LSHIFTDIVC?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_LSHIFT_HASH_DIV?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Opcode_op_LSHIFT_HASH_DIVR?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Opcode_op_LSHIFT_HASH_DIVC?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Opcode_op_LSHIFT_HASH?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Opcode_op_RSHIFT_HASH?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Opcode_op_LSHIFT?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_RSHIFT?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_POW2?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_AND?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_OR?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_XOR?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode_op_NOT?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Opcode?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  op_NOP?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_SWAP?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_DUP?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_OVER?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_DROP?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_NIP?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_ROT?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_MINUS_ROT?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_2SWAP?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_2DROP?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_2DUP?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_2OVER?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_PICK?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_ROLLX?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_MINUS_ROLLX?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_BLKSWX?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_REVX?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_DROPX?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_TUCK?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_XCHGX?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_DEPTH?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_CHKDEPTH?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_ONLYTOPX?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_ONLYX?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_ZERO?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_ONE?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_TWO?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_TEN?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_TRUE?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_PUSHINT?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_PUSHINTX?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_PUSHPOW2?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_PUSHNAN?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_PUSHPOW2DEC?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_PUSHNEGPOW2?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_PUSHREF?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_PUSHREFSLICE?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_PUSHREFCONT?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_PUSHSLICE?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_ADD?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_SUB?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_SUBR?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_NEGATE?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_INC?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_DEC?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_ADDCONST?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_SUBCONST?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_MULCONST?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_MUL?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_DIV?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_DIVR?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_DIVC?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_MOD?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_DIVMOD?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_DIVMODR?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_DIVMODC?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_RSHIFTR?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_RSHIFTC?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_RSHIFTR_HASH?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_RSHIFTC_HASH?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_MODPOW2_HASH?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_MODPOW2R_HASH?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_MODPOW2C_HASH?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_MULDIV?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_MULDIVR?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_MULMOD?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_MULDIVMOD?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_MULDIVMODR?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_MULDIVMODC?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_MULRSHIFT?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_MULRSHIFTR?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_MULRSHIFTC?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_MULRSHIFT_HASH?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_MULRSHIFTR_HASH?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_MULRSHIFTC_HASH?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_LSHIFTDIV?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_LSHIFTDIVR?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_LSHIFTDIVC?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_LSHIFT_HASH_DIV?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_LSHIFT_HASH_DIVR?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_LSHIFT_HASH_DIVC?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_LSHIFT_HASH?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_RSHIFT_HASH?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_LSHIFT?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_RSHIFT?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_POW2?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_AND?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_OR?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_XOR?: (this: NonterminalNode, arg0: TerminalNode) => T;
  op_NOT?: (this: NonterminalNode, arg0: TerminalNode) => T;
  cellLiteral?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: TerminalNode) => T;
  integerLiteral?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  integerLiteralDec?: (this: NonterminalNode, arg0: IterationNode, arg1: IterationNode) => T;
  integerLiteralHex?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode) => T;
  letterAsciiLC?: (this: NonterminalNode, arg0: TerminalNode) => T;
  letterAsciiUC?: (this: NonterminalNode, arg0: TerminalNode) => T;
  letterAscii?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  letterComment?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  idStart?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  idPart?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  id?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode) => T;
  space?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  comment?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  lineTerminator?: (this: NonterminalNode, arg0: TerminalNode) => T;
  multiLineComment?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: TerminalNode) => T;
  singleLineComment?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode) => T;
}

export interface FiftSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: FiftActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: FiftActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: FiftActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: FiftActionDict<T>): this;
}

export interface FiftGrammar extends Grammar {
  createSemantics(): FiftSemantics;
  extendSemantics(superSemantics: FiftSemantics): FiftSemantics;
}

declare const grammar: FiftGrammar;
export default grammar;

