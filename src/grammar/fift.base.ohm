Fift {
    // Starting point of the program
    Program = "PROGRAM{" ProgramItem* "}END>c"
    ProgramItem = FunctionDeclaration | FunctionImplementation
    FunctionDeclaration = "DECLPROC" id --simple
                        | integerLiteral "DECLMETHOD" id --exported
    FunctionImplementation = id "PROC" ":<{" Instruction* "}>" --generic
                           | id "PROCREF" ":<{" Instruction* "}>" --ref
                           | id "PROCINLINE" ":<{" Instruction* "}>" --inline
    
    // Instructions
    Instruction = Opcode --opcode
                | Instruction_if

    // Conditionals
    Instruction_if = "IFJMP:<{" Instruction* "}>" --ifjmp
                   | "IFNOTJMP:<{" Instruction* "}>" --ifnotjmp
                   | "IF:<{" Instruction* "}>ELSE<{" Instruction* "}>" --ifelse
                   | "IFNOT:<{" Instruction* "}>ELSE<{" Instruction* "}>" --ifnotelse
                   | "IF:<{" Instruction* "}>" --if
                   | "IFNOT:<{" Instruction* "}>" --ifnot

    // Opcodes
    Opcode = ""

    // Cell literal
    cellLiteral = "x{" hexDigit* "}"

    // Integer Literal
    // hexDigit defined in Ohm's built-in rules (otherwise: hexDigit = "0".."9" | "a".."f" | "A".."F")
    // digit defined in Ohm's built-in rules (otherwise: digit = "0".."9")
    integerLiteral = integerLiteralHex | integerLiteralDec // Order is important
    integerLiteralDec = # "-"? digit+ 
    integerLiteralHex = "0x" hexDigit+
                      | "0X" hexDigit+

    // Letters
    letterAsciiLC = "a".."z"
    letterAsciiUC = "A".."Z"
    letterAscii = letterAsciiLC | letterAsciiUC
    letterComment = letterAsciiLC | letterAsciiUC | digit | "_"

    // ID
    idStart = letterAscii | "_"
    idPart = letterAscii | digit | "_"
    id = #idStart #(idPart*)

    // Comments
    space += comment | lineTerminator
    comment = multiLineComment | singleLineComment
    lineTerminator = "\n" | "\r" | "\u2028" | "\u2029"
    multiLineComment = "/*" (~"*/" any)* "*/"
    singleLineComment = "//" (~lineTerminator any)*
}